library ieee;
use ieee.numeric_std.all;
use ieee.std_logic_1164.all;
LIBRARY lpm;
USE lpm.lpm_components.all;


entity RAM is 

    generic (
        DATA_WIDTH : natural := 8
    );

port ( 
	D11, D12, FI, IC1 :in  std_logic_vector((DATA_WIDTH-1) downto 0);
   Do1, Fo:out   std_logic_vector((DATA_WIDTH-1) downto 0));
					 
end entity;


architecture RAM_arch of RAM is 

	signal D1, D2: signed ((DATA_WIDTH-1) downto 0);
	signal IC    : natural range 0 to 2**DATA_WIDTH - 1;
	signal Do    : signed ((DATA_WIDTH-1) downto 0);

	signal SBuff : signed (((DATA_WIDTH * 2 )-1)downto 0);


	component LPM_ADD_SUB
        generic (LPM_WIDTH : natural; 
		LPM_DIRECTION : string := "UNUSED";
		LPM_REPRESENTATION: string := "SIGNED";
		LPM_PIPELINE : natural := 0;
		LPM_TYPE : string := L_ADD_SUB;
		LPM_HINT : string := "UNUSED");
	port (DATAA : in std_logic_vector(DATA_WIDTH-1 downto 0);
		DATAB : in std_logic_vector(DATA_WIDTH-1 downto 0);
		ACLR : in std_logic := '0';
		CLOCK : in std_logic := '0';
		CLKEN : in std_logic := '1';
		CIN : in std_logic := 'Z';
		ADD_SUB : std_logic := '1';
		RESULT : out std_logic_vector(DATA_WIDTH-1 downto 0);
		COUT : out std_logic;
		OVERFLOW : out std_logic);
	end component;

		


	begin 


	lpm_add_sub_component : lpm_add_sub
		GENERIC MAP ( lpm_width =>(DATA_WIDTH-2) ,
		lpm_type => "LPM_ADD_SUB",
		LPM_REPRESENTATION => "SIGNED",
		lpm_hint => "ONE_INPUT_IS_CONSTANT=NO,CIN_USED=NO" )
	PORT MAP ( dataa => D11,
		add_sub => add_sub,
		datab => D12,
		cin => Fi(6),
		cout => CoutAddSub);



	func: process(IC1)is
	begin


	case IC is
	end case;

	end process func;
end architecture RAM_arch;
